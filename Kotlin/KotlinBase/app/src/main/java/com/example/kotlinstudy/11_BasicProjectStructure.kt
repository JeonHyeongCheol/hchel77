package com.example.kotlinstudy

class `11_BasicProjectStructure` {
    // Title : 기본 프로젝트 구조

    // 모듈(Module)
    // 하나의 프로젝트는 여러 개의 모듈로 구성되어 있음
    // 모듈은 '직접' 만들 수도 있고
    // 필요한 기능을 이미 구현해 둔 '라이브러리 모듈'을 가져와 붙일 수 있음
    // 굉장히 편리한 기능 단위

    // 모듈은 여러 개의 폴더와 파일들이 들어갈 수 있음
    // 코틀린 파일(.kt) 뿐만 아니라 모듈과 관련된 설정 및 리소스 파일 등도 포함 될 수 있음

    // 프로젝트, 모듈, 폴더 및 파일이 실제 파일 시스템에 기반한 물리적인 구조를 담당

    // 패키지(Package) : 논리적인 구조
    // 개발시에 소스 코드의 '소속'을 지정하기 위한 논리적 단위

    // 일반적으로 패키지의 이름을 지을 때는
    // 개발한 회사의 서비스 도메인을 거꾸로 배열하고 그 뒤에 프로젝트명을 붙임
    // 그 후 뒤에 세분화하여 붙임

    // package com.youtube.jhc
    // 위와 같이 선언 할 수 있으며,
    // 패키지를 명시하지 않으면 자동으로 'default' 패키지로 묶이게 됨
    // 코틀린은 자바와 달리 폴더 구조와 패키지명을 일치시키지 않아도 됨
    // 단순히 파일 상단에 패키지명만 명시해주면 컴파일러가 알아서 처리하게 됨

    // 같은 패키지 내에서는 변수, 함수, 클래스를 공유 할 수 있음
    // 패키지가 다르면 쓸 수 없음. 이때 import 작업을 수행 해야 함
    // 패키지 선언 밑에 import 선언 후 사용할 외부 패키지 이름을 써주면 다른 패키지의 변수나 함수,
    // 클래스 등을 그대로 사용 할 수 있음
    // 클래스명이 같으면 풀 패키지 경로를 명시하여야 함(자바랑 동일)

    // 클래스명과 파일명이 일치하지 않아도 되며 하나의 파일에
    // '여러개의 클래스'를 넣어도 알아서 컴파일이 가능 함
    // 이는 파일이나 폴더를 기준으로 구분하지 않고 파일내에 있는 package 키워드를 기준으로 구분하기 때문임
}