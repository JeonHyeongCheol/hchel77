package pack2;

public class Animal {
		private int leg = 4;
		private int age = 0; // "private int age;" 과 같음. 즉, 초기값을 주지 않으면 값이 0과 같음
		private String name;
		private static int mouse = 1;
		
		public Animal() {
			// 생성자는 내용이 없을 시 생략가능 (컴파일러가 생성)
			
			}
		
		public Animal (int leg) { //constructor overload(ing) 생성자 오버로딩
			this.leg = leg; // 생성자지만 오버로딩을 위해 여러가지 변수로 하여 사용
		}
		
		public Animal (String irum, int nai) { //constructor overload(ing) 생성자 오버로딩
			this.name = irum; // 생성자지만 오버로딩을 위해 여러가지 변수로 하여 사용
			age = nai;
			
		}

		public Animal (String name) { //constructor overload(ing) 생성자 오버로딩
			this.name = name; // 생성자지만 오버로딩을 위해 여러가지 변수로 하여 사용
		// 생성자는 내용이 없을 시 생략가능 (컴파일러가 생성)
		
		}
		
		public void display() {
			System.out.println("leg:" + leg + ", age:" + age + ", name:" + name);
		}
		
		public void display(int age) { // method overloading(ing) - 동일한 이름의 메소드가 존재할려면 argument 의 변수가 달라야 한다.
			this.age = age; // 전역변수와 지역변수를 구분하기위해 "this"를 씀
			System.out.println("leg:" + leg + ", age:" + age + ", name:" + name);
		}
		
		public void display(String name) { // method overloading(ing) - 동일한 이름의 메소드가 존재할려면 argument 의 변수가 달라야 한다.
			this.name = name; // 전역변수와 지역변수를 구분하기위해 "this"를 씀
			System.out.println("leg:" + leg + ", age:" + age + ", name:" + name);
		}
		
		public void display(int age, String str) { // method overloading(ing) - 동일한 이름의 메소드가 존재할려면 argument 의 갯수, 변수 및 타입이 다르면 성립한다. 
			
			this.age = age; // 전역변수와 지역변수를 구분하기위해 "this"를 씀
			name = str;
			System.out.println("leg:" + leg + ", age:" + age + ", name:" + name);
		}
			
		public void display(String str, int age) { // method overloading(ing) - 동일한 이름의 메소드가 존재할려면 argument 의 갯수, 변수, 타입 순서가 다르면 성립한다. 
				
				this.age = age; // 전역변수와 지역변수를 구분하기위해 "this"를 씀
				name = str;
				System.out.println("leg:" + leg + ", age:" + age + ", name:" + name);	
		}
		
		// -----------xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx----------//
		
/*		public void display(String str, int age) { // method overloading(ing) - 동일한 이름의 메소드가 존재할려면 argument 의 갯수, 변수, 타입 순서가 다르면 성립한다. 
			
			this.age = age; // 전역변수와 지역변수를 구분하기위해 "this"를 씀
			name = str;
			System.out.println("leg:" + leg + ", age:" + age + ", name:" + name);	
	}
		public void display(int leg) { // method overloading(ing) - 동일한 이름의 메소드가 존재할려면 argument 의 갯수, 변수, 타입 순서가 다르면 성립한다. 
			
			this.age = age; // 전역변수와 지역변수를 구분하기위해 "this"를 씀
			name = str;
			System.out.println("leg:" + leg + ", age:" + age + ", name:" + name);	
	}
	
		public void display( int bb) { 
			this.age = age;
			name = str;
			System.out.println("leg:" + leg + ", age:" + age + ", name:" + name);	
			return 5;
*/
		public static void myStaticMethod () {
			System.out.println("난 스태틱 메소드");
			// System.out.println("다리 수:" + leg); <- static member 는 static member만 부를수 있음 

			System.out.println("마우스:" + mouse);

		}
		
		public void normalMethod( ) {
			System.out.println("난 일반 메소드 ");
			System.out.println("다리 수:" + leg);
			System.out.println("마우스:" + mouse);
		}
		
}

// 
