ggmap(seoul) + geom_point(data = s_3, aes(x=경도,y=경도), size = 2.5, alpha = 0.7)
ggmap(seoul) + geom_point(data = s_3, aes(x=경도,y=경도), size = 2.5, alpha = 0.7)
ggmap(seoul) + geom_point(data = s_2, aes(x=경도,y=경도), size = 2.5, alpha = 0.7)
s_3
center <- c(mean(s_3$경도), mean(s_3$위도)) # center에 평균값을 구해 위도, 경도 저장하기
seoul <- get_map(center, zoom = 11, maptype = 'roadmap') # seoul에 중앙지점 보여주기위해서 설정하기. zoom, maptype 설정.
ggmap(seoul)
ggmap(seoul) + geom_point(data = s_3, aes(x=경도,y=경도), size = 2.5, alpha = 0.7)
ggmap(seoul) + geom_point(data = s_3, aes(x=경도,y=경도), size = 2.5, alpha = 0.7)
s_3
# 3호선
s_3 <- data2 %>% filter(호선 == '3')
s_3
center <- c(mean(s_3$경도), mean(s_3$위도)) # center에 평균값을 구해 위도, 경도 저장하기
seoul <- get_map(center, zoom = 11, maptype = 'roadmap') # seoul에 중앙지점 보여주기위해서 설정하기. zoom, maptype 설정.
ggmap(seoul)
ggmap(seoul) + geom_point(data = s_3, aes(x=경도,y=경도), size = 2.5, alpha = 0.7)
+ geom_point(data = s_3, aes(x=경도,y=위도), size = 2.5, alpha = 0.7, col='orange')
+ geom_point(data = s_3, aes(x=경도,y=위도), size = 2.5, alpha = 0.7, col='red')
ggmap(seoul) + geom_point(data = s_3, aes(x=경도,y=위도), size = 2.5, alpha = 0.7)
ggmap(seoul) + geom_point(data = s_2, aes(x=경도,y=위도), size = 2.5, alpha = 0.7)
ggmap(seoul) + geom_point(data = s_2, aes(x=경도,y=위도), size = 2.5, alpha = 0.7, col='green')
ggmap(seoul) + geom_point(data = s_2, aes(x=경도,y=위도), size = 2.5, alpha = 0.7, col='green')
+ geom_point(data = s_3, aes(x=경도,y=위도), size = 2.5, alpha = 0.7, col='red')
+ geom_text(data = s_3, aes(x=경도,y=위도, label=전철역명), size = 2.5)
ggmap(seoul) + geom_point(data = s_2, aes(x=경도,y=위도), size = 2.5, alpha = 0.7, col='green')
+ geom_point(data = s_3, aes(x=경도,y=위도), size = 2.5, alpha = 0.7, col='orange')
+ geom_text(data = s_3, aes(x=경도,y=위도, label=전철역명), size = 2.5)
ggmap(seoul) + geom_point(data = s_2, aes(x=경도,y=위도), size = 2.5, alpha = 0.7, col='green') +
geom_point(data = s_3, aes(x=경도,y=위도), size = 2.5, alpha = 0.7, col='orange') +
geom_text(data = s_3, aes(x=경도,y=위도, label=전철역명), size = 2.5)
# 한국복지패널 자료
install.packages("foreign")
library(foreign)
library(dplyr)
library(ggplot2)
library(readxl)
install.packages("readxl")
library(readxl)
ori_welfare <- read.spss("testdata/Koweps_hpc10_2015_beta1.sav")
ori_welfare
welfare <- ori_welfare
View(welfare)
ori_welfare <- read.spss("testdata/Koweps_hpc10_2015_beta1.sav", to.data.frame = T)
welfare <- ori_welfare
View(welfare)
str(welfare)
summarise(welfare)
summary(welfare)
names(welfare)
welfare <- rename(welfare, sex = h10_g3, birth = h10_g4, marriage = h10_g10,
religion = h10_g11, income = p1002_8aq1, code_job = h10_eco9,
code_region = h10_re7)
welfare <- rename(welfare, sex = h10_g3, birth = h10_g4, marriage = h10_g10,
religion = h10_g11, income = p1002_8aq1, code_job = h10_eco9,
code_region = h10_reg7)
welfare
head(welfare$sex, welfare$birth)
head(welfare$sex)
# 성별에 따른 월급 차이
class(welfare$sex)
table(welfare$sex)
is.na(welfare$sex) # na(null) 값이 있는지 확인.
table(is.na(welfare$sex))
welfare$sex <- ifelse(welfare$sex == 1, 'Male', 'female')
table(welfare$sex)
qplot(welfare$sex)
class(welfare$income)
qplot(welfare$income)
class(welfare$income)
qplot(welfare$income) + xlim(0, 1000)
summary(welfare$income)
welfare$income <- ifelse(welfare$income %in% c(0, 9999), NA, welfare$income)
table(is.na(welfare$income))
sex_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean_income=mean(income))
sex_income
qqplot(data=sex_income, aes(x=sex, y=mean_income))
qqplot(data=sex_income, aes(x=sex, y=mean_income)) + geom_col()
sex_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean_income=mean(income))
sex_income
qqplot(data=sex_income, aes(x=sex, y=mean_income)) + geom_col()
gplot(data=sex_income, aes(x=sex, y=mean_income)) + geom_col()
ggplot(data=sex_income, aes(x=sex, y=mean_income)) + geom_col()
library(reshape2)
no <- c(1,1,2,2)
day <- c(1,2,1,2)
al <- c(40,30,50,25)
a2 <- c(70,55,80,45)
df <- data.frame(no, day, a1, a2)
df
no <- c(1,1,2,2)
day <- c(1,2,1,2)
al <- c(40,30,50,25)
a2 <- c(70,55,80,45)
df <- data.frame(no, day, a1, a2)
no <- c(1,1,2,2)
a1 <- c(40,30,50,25)
day <- c(1,2,1,2)
a2 <- c(70,55,80,45)
df <- data.frame(no, day, a1, a2)
df
m_data <- melt(df, id=c('no','day'))
m_data
dcast(m_data, no + day ~ varible)
m_data <- melt(df, id=c('no','day'))
m_data
dcast(m_data, no + day ~ varible)
dcast(m_data, no + day ~ variable)
dcast(m_data, no + variable ~ day)
dcast(m_data, no ~ variable ~ day) # 열변수 더하기
dcast(m_data, no ~ variable + day) # 열변수 더하기
dcast(m_data, no ~ variable, ㅡㄷ)
dcast(m_data, no ~ variable, mean)
dcast(m_data, day ~ variable, mean)
dcast(m_data, no ~ day, mean)
dcast(m_data, no ~ variable + day) # 열변수 더하기
m_data
#--------------------------------------------------------------------------------
pay_data <- read.csv("testdata/pay_data.csv")
head(pay_data)
table(pay_data$product_type)
product_price <- dcast(pay_data, user_id ~ product_type, sum, na.rm = T)
product_price <- dcast(pay_data, user_id ~ product_type, sum, na.rm = T)
product_price <- dcast(pay_data, user_id ~ product_type, sum, na.rm = T)
product_price
names(product_price) <- c('user_id', '식료품1','생필품2','주류3','잡화4','기타5')
head(product_price)
pay_price <- dcast(pay_data, user_id ~ pay_method, length)
head(pay_price)
product_pay_data <- join(product_price, pay_price, by='user_id')
product_pay_data
welfare <- rename(welfare, sex = h10_g3, birth = h10_g4, marriage = h10_g10,
religion = h10_g11, income = p1002_8aq1, code_job = h10_eco9,
code_region = h10_reg7)
# 성별에 따른 월급 차이
class(welfare$sex)
welfare <- rename(welfare, sex = h10_g3, birth = h10_g4, marriage = h10_g10,
religion = h10_g11, income = p1002_8aq1, code_job = h10_eco9,
code_region = h10_reg7)
# 성별에 따른 월급 차이
class(welfare$sex)
table(welfare$sex) # 1은 남, 2는 여, 값 확인
is.na(welfare$sex) # na(null) 값이 있는지 확인.
table(is.na(welfare$sex))
welfare$sex <- ifelse(welfare$sex == 1, 'Male', 'female') # 칼럼안에있는 값에 대한 명칭 바꾸기.
table(welfare$sex)
qplot(welfare$sex)
class(welfare$income) # income? 월급?
qplot(welfare$income)
class(welfare$income)
qplot(welfare$income) + xlim(0, 1000) # x축의 값 설정
summary(welfare$income)
welfare$income <- ifelse(welfare$income %in% c(0, 9999), NA, welfare$income)
table(is.na(welfare$income))
sex_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean_income=mean(income))
sex_income
ggplot(data=sex_income, aes(x=sex, y=mean_income)) + geom_col()
install.packages("rJava")
install.packages("DBI")
install.packages("RJDBC")
library(rJava)
library(DBI)
library(RJDBC)
install.packages("RSQLite")
library(RSQLite)
head(mtcars)
dbWriteTable(conn, "mtcars", mtcars)
# 내장된 DB(Sqlite)와 연결
conn <- dbConnect(RSQLite::SQLite(),":memory:")
conn
head(mtcars)
dbWriteTable(conn, "mtcars", mtcars)
dbListFields(conn, mtcars)
dbListFields(conn, "mtcars")
query <- "select * from mtcars"
result <- dbGetQuery(conn, query)
result
query2 <- "select mpg, cyl from mtcars where mpg >= 30"
result2 <- dbGetQuery(conn, query2)
result2
# RDBMS(MariaDB)와 연동
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver")
# RDBMS(MariaDB)와 연동
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver", classPath = "C:/work/mariadb-java-client-1.3.6.jar")
library(rJava)
library(DBI)
library(RJDBC)
library(RSQLite)
# RDBMS(MariaDB)와 연동
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver", classPath = "C:/work/mariadb-java-client-1.3.6.jar")
library(rJava)
library(DBI)
library(RJDBC)
library(RSQLite)
# 내장된 DB(Sqlite)와 연결.
conn <- dbConnect(RSQLite::SQLite(),":memory:")
conn
dbDisconnect(conn) # DB 연결 해제.
# RDBMS(MariaDB)와 연동
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver", classPath = "C:/work/mariadb-java-client-1.3.6.jar")
# RDBMS(MariaDB)와 연동
drv <- JDBC(driverClass = "org.mariadb.jdbc.Driver", classPath = "C:/work/rsou/mariadb-java-client-1.3.6.jar")
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/test","root","123")
dbListTables(conn)
goodAll <- dbGetQuery(conn, query)
goodAll
class(goodAll)
goodAll <- dbGetQuery(conn, query)
# SangData로 RUD 경험하기
query <- "select * from sangdata"
goodAll <- dbGetQuery(conn, query)
goodAll
class(goodAll)
barplot(goodAll$su, col = rainbow(10), names.arg = goodAll$sang)
goods <- dbGetQuery(conn, query2)
query2 <- "select * from sangdata where sang like'가죽%'"
goods <- dbGetQuery(conn, query2)
goods
query3 <- "select * from sangdata order by code desc"
goods <- dbGetQuery(conn, query2)
goods
goods <- dbGetQuery(conn, query3)
goods
# 레코드 추가
query <- "insert into snagdata values(5, '칙촉', 10, 500)"
dbSendUpdate(conn, query)
# 레코드 추가
query <- "insert into snagdata values(6, '칙촉', 10, 500)"
dbSendUpdate(conn, query)
# 레코드 추가
query <- "insert into sangdata values(6, '칙촉', 10, 500)"
dbSendUpdate(conn, query)
df <- data.frame(code=7, sang='빈츠', su=7, dan=300)
df
dbSendUpdate(conn, "insert into sangdata values(?,?,?,?", df$code, df$sang, df$su, df$dan)
dbSendUpdate(conn, "insert into sangdata values(?,?,?,?)", df$code, df$sang, df$su, df$dan)
dbGetQuery(conn, query)
# SangData로 RUD 경험하기
query <- "select * from sangdata"
dbGetQuery(conn, query)
# 레코드 수정
query <- "update sangdata set sang='새우깡' where code=7"
# 레코드 수정
query <- "update sangdata set sang='새우깡' where code=7"
dbSendQuery(conn, query)
# 레코드 수정
query <- "update sangdata set sang='새우깡' where code=7"
dbSendQuery(conn, query)
dbSendUpdate(conn, query)
# 레코드 수정
query <- "update sangdata set sang='새우깡' where code=7)
dbSendUpdate(conn, query, '수미칩')
# 레코드 삭제
# 레코드 수정
query <- "update sangdata set sang='새우깡' where code=7)"
dbSendUpdate(conn, query, '수미칩')
# 레코드 수정
query <- "update sangdata set sang='새우깡' where code=7)"
dbSendUpdate(conn, query, '수미칩')
dbSendUpdate(conn, query, "수미칩")
# 레코드 수정
query <- "update sangdata set sang='새우깡' where code=7)"
dbSendUpdate(conn, query)
# 레코드 수정
query <- "update sangdata set sang='새우깡' where code=7)"
dbSendUpdate(conn, query)
query <- "update sangdata set sang='새우깡' where code=7)"
query <- "update sangdata set sang=? where code=7)"
dbSendUpdate(conn, query, "수미칩")
# 레코드 수정
query <- "update sangdata set sang='새우깡' where code=7)"
dbSendUpdate(conn, query)
# 레코드 수정
query <- "update sangdata set sang='새우깡' where code=7"
dbSendUpdate(conn, query)
query <- "update sangdata set sang=? where code=7"
dbSendUpdate(conn, query, "수미칩")
dbGetQuery(conn, "select * from sangdata")
# 레코드 삭제
dbSendUpdate(conn, "delete from sangdata where code=7")
dbGetQuery(conn, "select * from sangdata")
# 여러 개의 행 추가
sangdf <- read.csv("testdata/sangpum.csv")
# 여러 개의 행 추가
sangdf <- read.csv("testdata/sangpum.csv", fileEncoding = "UTF-8")
sangdf
# 여러 개의 행 추가
sangdf <- read.csv("testdata/sangpum.csv", fileEncoding = "UTF-8")
# 여러 개의 행 추가
sangdf <- read.csv("testdata/sangpum.csv", fileEncoding = "UTF-8")
sangdf
# 여러개의 행 추가하는 함수 작성
library(dplyr)
# 여러개의 행 추가하는 함수 작성
library(dplyr)
batch <- apply(df, 1, FUN = function(x) paste0("'", trimws(x), "'",))
batch <- apply(df, 1, FUN = function(x) paste0("'", trimws(x), "'", collapse = ",")) %>%
}
batch <- apply(df, 1, FUN = function(x) paste0("'", trimws(x), "'", collapse = ",")) %>%
paste0("(",.,")", collapse = ",\n")
func(conn, "sangdata", sangdf)
func(conn, "sangdata", sangdf)
batch
func(conn, "sangdata", sangdf)
# 여러 개의 행 추가
sangdf <- read.csv("testdata/sangpum.csv", fileEncoding = "UTF-8")
sangdf
func <- function(conn, table, df) {
batch <- apply(df, 1, FUN = function(x) paste0("'", trimws(x), "'", collapse = ",")) %>%
paste0("(",.,")", collapse = ",\n")
batch
}
func(conn, "sangdata", sangdf)
batch <- apply(df, 1, FUN = function(x) paste0("'", trimws(x), "'", collapse = ",")) %>%
paste0("(",.,")", collapse = ",\n")
func(conn, "sangdata", sangdf)
func <- function(conn, table, df) {
batch <- apply(df, 1, FUN = function(x) paste0("'", trimws(x), "'", collapse = ",")) %>%
paste0("(",.,")", collapse = ",\n")
# batch
query <- paste("insert into", table, "values", batch)
dbSendUpdate(conn, query)
}
func(conn, "sangdata", sangdf)
# 여러 개의 행 추가
sangdf <- read.csv("testdata/sangpum.csv", fileEncoding = "UTF-8")
sangdf
func <- function(conn, table, df) {
batch <- apply(df, 1, FUN = function(x) paste0("'", trimws(x), "'", collapse = ",")) %>%
paste0("(",.,")", collapse = ",\n")
# batch
query <- paste("insert into", table, "values", batch)
dbSendUpdate(conn, query)
}
func(conn, "sangdata", sangdf)
dbDisconnect(conn)
install.packages("KoNLP")
install.packages("tm")
library(KoNLP)
library(tm)
library(rJava)
library(KoNLP)
library(tm)
library(rJava)
sentense <- "아버지가방에들어가신다"
extractNoun(sentense)
library(KoNLP)
library(tm)
library(KoNLP)
library(KoNLP)
library(tm)
library(rJava)
sentense <- "아버지가방에들어가신다"
extractNoun(sentense)
sentense <- "아버지 가방에 들어 가신다"
extractNoun(sentense)
sentense <- "아버지가 방에 들어 가신다"
extractNoun(sentense)
sentense <- "내 이름은 홍길동. 홍길동의 동생이 방에서 나온다"
extractNoun(sentense)
SimplePos09(sentense)
SimplePos22(sentense)
ss <- SimplePos09(sentense)
ss
extn <- str_match(ss, '([가-힣]+)/N')
library(stringr)
extn <- str_match(ss, '([가-힣]+)/N')
mo <- MorphAnalyzer(sentense)
mo
sum(sapply(mo, length))
library(ggplot2)
morth_cnt <- rbind(data.table(eojeol=names(mo), cnts = sapply(mo, length), kind='어절'))
mo
sum(sapply(mo, length))
library(ggplot2)
morth_cnt <- rbind(data.table(eojeol=names(mo), cnts = sapply(mo, length), kind='어절'))
morth_cnt <- rbind(data.table::data.table(eojeol=names(mo), cnts = sapply(mo, length), kind='어절'))
ggplot(morth_cnt, aes(eojeol, cents)) + geom_bar(stat = 'identity', aes(fill=kind), position = 'dodge') +
coord_flip() +
ggtitle('어절별 분석 결과')
ggplot(morth_cnt, aes(eojeol, cents)) + geom_bar(stat = 'identity', aes(fill=kind), position = 'dodge') +
coord_flip() +
ggtitle('어절별 분석 결과')
ggplot(morth_cnt, aes(eojeol, cnts)) + geom_bar(stat = 'identity', aes(fill=kind), position = 'dodge') +
coord_flip() +
ggtitle('어절별 분석 결과')
?data.tabel
library(data.table)
library(data.table)
morth_cnt <- rbind(data.table(eojeol=names(mo), cnts = sapply(mo, length), kind='어절'))
ggplot(morth_cnt, aes(eojeol, cnts)) + geom_bar(stat = 'identity', aes(fill=kind), position = 'dodge') +
coord_flip() +
ggtitle('어절별 분석 결과')
install.packages("wordcloud")
library(wordcloud)
data <- readLines("testdata/wordclo.txt")
data
data1 <- readLines("testdata/wordclo.txt")
data1
data2 <- sapply(data1, extractNoun, USE.NAMES = F)
data2
data3 <- unlist(data2)
class(data3)
typeof(data3)
data3
data3 <- gsub('[~!@#$%^&*()_+?<>]','',data3) # 특수만자 제거.
data3
data3 <- gsub('[~!@#$%^&*()_+?<>-]','',data3) # 특수만자 제거.
data3
data3 <- gsub('[\\d+','',data3) # 숫자 제거.
data3 <- gsub('\\d+','',data3) # 숫자 제거.
data3
data3 <- gsub(' ','',data3)
data3
library(dplyr)
data3 <- filter()
data3 <- filter(function(x) {nchar(x) >= 2}, data3) # 문자갯수 걸러내기. 2개이상인 문자만 남김.
data3 <- Filter(function(x) {nchar(x) >= 2}, data3) # 문자갯수 걸러내기. 2개이상인 문자만 남김.
data3
# 파일로 저장.
write(unlist(data3, 'testdata/wordclomy.txt'))
# 파일로 저장.
write(unlist(data3), 'testdata/wordclomy.txt'))
# 파일로 저장.
write(unlist(data3), 'testdata/wordclomy.txt')
data4 <- read.table('testdata/wordclo.txt')
head(data4)
data4 <- read.table('testdata/wordclo.txt')
head(data4)
data4 <- read.table('testdata/wordclo.txt')
head(data4)
data4 <- read.table('testdata/wordclo.txt')
data4 <- read.table('testdata/wordclomy.txt')
head(data4)
data3 <- Filter(function(x) {nchar(x) >= 2}, data3) # 문자갯수 걸러내기. 2개이상인 문자만 남김.
data3
# 파일로 저장.
write(unlist(data3), 'testdata/wordclomy.txt')
data4 <- read.table('testdata/wordclomy.txt')
head(data4)
word <- table(data4)
head(sort(word),10)
install.packages("RcolorBrewer")
install.packages("RcolorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
display.brewer.all()
palete <- brewer.pal(9, "Set3")
wordcloud(names(word), freq = word, min.freq = 2, random.order = F, random.color = T, colors = palete)
wordcloud(names(word), freq = word, min.freq = 2, random.order = F, random.color = T, colors = palete)
wordcloud::wordcloud(names(word), freq = word, min.freq = 2, random.order = F, random.color = T, colors = palete)
library(wordcloud)
wordcloud(names(word), freq = word, min.freq = 2, random.order = F, random.color = T, colors = palete)
library(wordcloud)
wordcloud(names(word), freq = word, min.freq = 2, random.order = F, random.color = T, colors = palete)
library(wordcloud)
wordcloud(names(word), freq = word, min.freq = 2, random.order = F, random.color = T, colors = palete)
library(wordcloud)
wordcloud(names(word), freq = word, min.freq = 2, random.order = F, random.color = T, colors = palete)
palete <- brewer.pal(9, "Set3")
windowsFonts(font=windowsFonts("돋움"))
library(wordcloud)
wordcloud(names(word), freq = word, min.freq = 2, random.order = F, random.color = T, colors = palete)
windowsFonts(font=windowsFont("돋움"))
wordcloud(names(word), freq = word, min.freq = 2, random.order = F, random.color = T, colors = palete)
windowsFonts(font=windowsFont("궁서체"))
wordcloud(names(word), freq = word, min.freq = 2, random.order = F, random.color = T, colors = palete)
sample(1:10, 5) # 비복원 추출
sample(1:10, 5) # 비복원 추출
sample(1:10, 5) # 비복원 추출
sample(1:10, 5) # 비복원 추출
sample(1:10, 5) # 비복원 추출
sample(1:10, 5, replace = T) # 복원 추출(중복을 나타냄)
sample(1:10, 5, replace = T) # 복원 추출(중복을 나타냄)
sample(1:10, 5, replace = T) # 복원 추출(중복을 나타냄)
sample(1:10, 5, replace = T, prob = 1:10) # prob : 가중치,
# 층화임의추출
install.packages("sampling")
library(sampling)
head(iris)
aa <- strata(c('Species'), size = c(3,3,3), method = 'srswor', data = iris) # method = 'srswor' : 비복원 추출.
aa
aa
aa <- strata(c('Species'), size = c(3,3,3), method = 'srswor', data = iris) # method = 'srswor' : 비복원 추출.
aa
sampling::getdata(iris, aa)
bb <- strata(c('Species'), size = c(3,1,1), method = 'srswor', data = iris)
bb
sampling::getdata(iris, bb)
# 계통추출
install.packages("doBy")
library(doBy)
(x <- data.frame(x:10))
(x <- data.frame(x=1:10))
sampleBy(~1, frac = .3, data = x, systematic = T)
sampleBy(~1, frac = .5, data = x, systematic = T)
sampleBy(~1, frac = .2, data = x, systematic = T)
sampleBy(~1, frac = .3, data = x, systematic = T)
sampleBy(~3, frac = .3, data = x, systematic = T) # frac : 갯수?,
sampleBy(~1, frac = .3, data = x, systematic = T) # frac : 갯수?,
sampleBy(~5, frac = .3, data = x, systematic = T) # frac : 갯수?,
? geom_point()
