package pack.thread;

public class ThreadTest1 extends Thread {
	// Thread : 프로세스의 자원을 이용해서 실제로 작업을 수행하는 것. 하나씩 처리하지만 여러 작업들을 번갈아 수행하여 모두 동시 수행되는 것 처럼 보임.
	
	// 멀티태스킹과 멀티쓰레딩
	// 멀티태스킹 : 여러 개의 프로세스가 동시 실행
	// 멀티쓰레딩 : 하나의 프로세스 내에서 여러 쓰레드가 동시에 작업을 수행하는 것.
	
	// 멀티쓰레딩의 장단점
	// 장점 
	// 1. CPU의 사용률을 향상.
	// 2. 자원을보다 효율적으로 사용.
	// 3. 사용자에 대한 응답성이 향상.
	// 4. 작업이 분리되어 코드가 간결.
	// 단점
	// 같은 프로세스 내에 자원을 공유하면서 작업을 함. -> 동기화(synchronization), 교착상태(DeadLock)와 같은 문제들 고려해야 함.
	
	// 쓰레드의 구현과 실행
	// 1. Thread클래스를 상속
	// 2. Runnable인터페이스를 구현 : Run을 오버로드 해야함. 
	//    Runnable 구현시 Thread 클래스의 static메서드인 current Thread()를 호출하여 쓰레드에 대한 참조를 얻어야지 호출 가능.
	//	  static Thread currentThread() : 현재 실행중인 쓰레드의 참조를 반환함.
	//	  String getName() : 쓰레드의 이름을 반환.
	
	public ThreadTest1() {
		
	}
	
	public ThreadTest1(String name) {
		super(name);
	}
	
	public void run() { // 현재 일반메소드 -> extends thread를 클래스 뒤에 써줬을 경우 오버라이딩 되고 있음.
		for (int i = 1; i <= 50; i++) {
			//System.out.print(i + " ");
			System.out.println(i + " : " + super.getName());
		}
	}
	
	public static void main(String[] args) {
		try {
			//프로세서 단위의 처리
			/*
			Process p1 = Runtime.getRuntime().exec("calc.exe");
			Process p2 = Runtime.getRuntime().exec("notepad.exe");
			p1.waitFor(); // 종료하게 되면 같이 열렸던 창들도 같이 닫힘.
			p2.destroy(); // 혼자 종료
			System.out.println("p1 : " + p1.exitValue()); // 정상
			System.out.println("p2 : " + p2.exitValue()); // 비정상종료. p1닫히면서 같이 닫혔기 때문에.
			*/
			
			/*
			ThreadTest1 t1 = new ThreadTest1();
			ThreadTest1 t2 = new ThreadTest1();
			t1.run();
			System.out.println();
			t2.run();
			*/
			
//			ThreadTest1 t1 = new ThreadTest1();
//			ThreadTest1 t2 = new ThreadTest1();
			ThreadTest1 t1 = new ThreadTest1("own");
			ThreadTest1 t2 = new ThreadTest1("two");
			t1.start(); // start() 메소드를 호출하게되면 자동적으로 run() 메소드가 실행됨
			t2.start();
			// 실행하게 되면 t1, t2가 번갈아가면서 실행하게 되는데, 프로세서가 쉬는 시간에 서로 번갈아가면서 실행.
			t2.setPriority(MAX_PRIORITY); // 우선순위 변경 요청
			
			t1.join(); // 일반 스레드의 수행이  끝날때 까지 메인스레드를 대기
			t2.join();
			
			t1.yield(); // 다른 스레드이 수행이 요청되면 스레드의 실행행을 일시정지
			//t1.stop(); //
			
			System.out.println("프로그램 종료");
			
		} catch (Exception e) {
			System.out.println("err" + e);
		}
	}
}
