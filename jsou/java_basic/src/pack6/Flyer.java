package pack6;

public interface Flyer {
	// 인터페이스 : 일종의 추상클래스, 추상메서드와 상수만을 멤버로 가질 수 있음.
	// 추상클래스가 미완성 설계도, 인터페이스는 기본설계도

	// 인터페이스 작성
	// interface 인터페이스 이름 {
	//		public static final 타입 상수이름 = 값;
	//		public abstract 메서드이름(매개변수목록);
	// }
	
	// 제약사항
	// 모든 멤버변수는 public static final이 어야 하며, 이를 생략 할 수 있음.
	// 모든 메서드는 public abstract 이어야 하며, 이름 생략 할 수 있음.(JDK 1.8부터 static메서드와, 디폴트 메서드는 예외)
	
	// 인터페이스 상속 : extend 상속인터페이스명 써주면 가능(인터페이스 상속만 여러 개 가능, 추상메서드는 한 개만).
	
	// 인터페이스 구현 : 다른 클래스의 인터페이스 구현 할 때는 implements 인터페이스이름으로 구현한 후 추상메소드를 오버로딩 해야함.
	//				추상클래스 상속 받은 후 인터페이스를 여러 개 구현받아서 사용 할 수 있음.
	//				ex) class Fighter extends Unit implements Fightable, Flyer
	
	// 인터페이스도 클래스의 조상이라고 할 수 있기 때문에 해당 인터페이스 타입의 참조변수로 이를 구현한 클래스 인스턴스를 참조 및 형변환 가능.
	
	// 인터페이스 다중 상속(책 p.385~386 참조)
	
	// 인터페이스 장점
	// 1. 개발시간을 단축
	// 2. 표준화 가능
	// 3. 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있음.
	// 4. 독립적인 프로그래밍 가능.
	
	// 인터페이스 이해(책 p.396~398 참조)
	// 클래스를 사용하는 쪽(User)과 클래스를 제공하는 쪽(Provider)가 있음.
	// 메서드를 사용(호출)하는 쪽(User)에서는 사용하려는 메서드(Provider)의 선언부만 알면 됨.(내용은 몰라도 됨)
	int FAST = 100;
	
	void fly();
	boolean isAnimal();
}
